package Cycles;
/**
 * Иногда требуется, чтобы повторение цикла осуществлялось с более
 * раннего оператора его тела. То есть на данной конкретной итерации
 * может требоваться продолжить выполнение цикла без обработки
 * остального кода в его теле. По сути, это означает переход в теле
 * цикла к его окончанию. Для выполнения этого действия служит оператор
 * continue. В циклах while и do-while оператор continue вызывает
 * передачу управления непосредственно управляющему условному выражению
 * цикла. В цикле for управление передается вначале итерационной части
 * цикла for, а потом условному выражению. Во всех этих трех циклах
 * любой промежуточный код пропускается.
 */
public class Continue {
    public static void main(String args[])  {
        for(int i=0; i<10; i++) {
            System.out.print(i + " ");
            //В этом коде оператор % служит для проверки четности значения переменной i.
            //Если оно четное, выполнение цикла продолжается без перехода к новой строке.
            if (i%2 == 0) continue;
            System.out.println();
        }
        /**
         * Как и оператор break, оператор continue может содержать метку
         * содержащего его цикла, который нужно продолжить. Ниже показан
         * пример программы, в которой оператор continue применяется для
         * вывода треугольной таблицы умножения чисел 0-5.
         */
        System.out.println("continue с меткой:");
        outer: for (int i=0; i<6; i++) {
            for(int j=0; j<6; j++) {
                if(j > i) {
                    System.out.println();
                    //Оператор continue прерывает цикл подсчета значений переменной j
                    //и продолжает его со след. итерации цикла подсчета переменной i
                    continue outer;
                }
                System.out.print(" " + (i * j));
            }
        }
        System.out.println();

    }
}/*
>>>     0 1
        2 3
        4 5
        6 7
        8 9
        continue с меткой:
          0
          0  1
          0  2  4
          0  3  6  9
          0  4  8  12  16
          0  5  10  15  20  25
*/