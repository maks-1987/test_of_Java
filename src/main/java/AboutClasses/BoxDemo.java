package AboutClasses;
/**
 * Класс создает новый тип данных, который можно использовать для
 * создания  объектов.
 * При каждом создании экземпляра класса мы создаем объект, который
 * содержит собственную копию каждой переменной экземпляра, определенной
 * классом. Таким образом, каждый объект класса Box будет содержать собственные
 * копии переменных экземпляра width, height и depth. Для доступа к этим
 * переменным применяется оператор точки (.). Этот оператор связывает имя
 * объекта с именем переменной экземпляра. Например, чтобы присвоить
 * переменной width объекта mybox значение 100, нужно было бы использовать
 * mybox.width = 100. Этот оператор указывает компилятору, что копии
 * переменной width, хранящейся внутри объекта mybox, нужно присвоить
 * значение 100. Изменения переменных экземпляра одного объекта не влияют
 * на переменные экземпляра другого.
 * Важно понимать, что оператор new резервирует память для объекта во
 * время выполнения. Преимущество этого подхода состоит в том, что программа
 * может создавать ровно столько объектов, сколько требуется во время ее
 * выполнения. Однако поскольку объем памяти ограничен, возможна ситуация,
 * когда оператор new не сможет выделить память для объекта из-за ее
 * нехватки. В этом случае передается исключение времени выполнения.
 */
class BoxDemo {
    // Этот класс объявляет объект класса Box
    public  static void main(String args[]) {
        Box mybox = new Box();
        Box mybox2 = new Box();
        double vol;
        // присваивание значений переменным экземпляра mybox
        mybox.width = 10;
        mybox.height = 20;
        mybox.depth =15;
        // присваивание значений переменным экземпляра mybox2
        mybox2.width = 5;
        mybox2.height = 6;
        mybox2.depth =9;
        // вычисление объема первого параллелепипеда
        vol = mybox.width * mybox.height * mybox.depth;
        System.out.println("Объем равен " + vol);
        // вычисление объема второго параллелепипеда
        vol = mybox2.width * mybox2.height * mybox2.depth;
        System.out.println("Volume is " + vol);
        /**
        * Метод всегда вызывается по отношению к какому-то объекту его
        * класса. Как только этот вызов выполнен,объект известен. Таким
        * образом, внутри метода вторичное указание объекта совершенно
        * излишне. Это означает, что переменные width, height и depth
        * неявно ссылаются на копии этих переменных, хранящиеся в объекте,
        * который вызывает метод volume ().
        * Когда обращение к переменной экземпляра выполняется кодом, не
        * являющимся частью класса, в котором определена переменная экземпляра,
        * необходимо указать объект при помощи точечного оператора. Однако
        * когда это обращение осуществляется кодом, который является частью
        * того же класса, где определена переменная экземпляра, ссылка на
        * переменную может выполняться непосредственно. Эти же правила
        * применимы и к методам.
        */
        /* Обращение к методу volume() можно было бы использовать в
        вызове метода println() непосредственно, как в следующей строке
        кода. System.out.println("Объем равен" + mybox.volume());
        В этом случае при вызове метода println ()  метод mybox.volume()
        будет вызываться автоматически, а возвращаемое им значение будет
        передаваться методу println() */
        // вызов метода из класса Box
        mybox.volume();
        mybox2.volume();
    }
}/*
>>>     Объем равен 3000.0
        Volume is 270.0
*/