package CollectionsExample;

import java.util.Iterator;

/**
 * При написании программ создаются новые объекты, которые станут известны
 * лишь во время работы. До того как прога начнет выполняться, мы не знаем
 * ни количества, ни даже типов нужных нам объектов. Нельзя рассчитывать,
 * что для каждого из возможных объектов можно будет завести отдельную ссылку.
 * На помощь приходит библиотека утилит Java (java.util.*), которая содержит
 * набор классов-контейнеров, основнымии из которых есть List, Set, Queue, Map.
 * Эти типы объектов - классы коллекций. Классы контейнеров способны
 * автоматич изменяться в размерах.
 *      Основные концепции
 * Библиотека контейнеров решает вопрос "хранения объектов", рассматривая его
 * как совокупность двух разных концепций, выраженных основными интерфейсами
 * библиотеки:
 *  - КОЛЛЕКЦИЯ(Collection): последовательность отдельных элементов,
 *  фолрмируемая по некоторым правилам. Интерфейс List хранит элементы в опред.
 *  последоват., а в интерф Set(множество) нельзя хранить повторяющиеся элем.
 *  Интерф Queue(очередь) выдает элементы в порядке, определяемом дисциплиной
 *  очереди(обычно совпадающем с порядком вставки).
 *  - КАРТА(Map): набор пар объектов "ключ-значен", с возможностью выборки
 *  значения по ключу.
 *
 */
class CollectReview {
    Iterator<CollectReview> itr;
}
