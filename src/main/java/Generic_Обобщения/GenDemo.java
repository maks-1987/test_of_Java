package Generic_Обобщения;

/**
 * Компилятор Java на самом деле НЕ создает различные версии класса Gen
 * или любого другого обобщенного класса. Вместо этого компилятор УДАЛЯЕТ
 * всю обобщенную информацию о типах, выполняя необходимые приведения,
 * чтобы сделать поведение вашего кода таким, будто создана специфическая
 * версия класса Gen. То есть имеется только одна версия класса Gen,
 * которая существует в вашей программе. Процесс удаления обобщенной
 * информации о типе называется очисткой (erasure).
 */
class GenDemo {
    public static void main(String args[]) {
        // Создать Gen-ссылку на класс Gen для Integers
        Gen<Integer> intOb;
        // Создать объект Gen<Integer> и присвоить ссылку на iOb
        // Отметьте применение автоупаковки для инкапсуляции значения
        // 88 в объект Integer
        intOb = new Gen<Integer>(88);
        // Показать тип данных, используемый iOb
        intOb.showType(); /**showType() из класса Gen*/
        // Получить значение iOb, никакого приведения не нужно
        int v = intOb.getOb();
        System.out.println("значение: " + v + "\n");

        // Создать объект Gen для String
        Gen<String> strOb = new Gen<String>("Обобщенный текст");
        // Показать тип данных, используемый strOb
        strOb.showType();
        // Получить значение strOb. Опять же приведение не требуется
        String str = strOb.getOb();
        System.out.println("Значение: " + str);
    }
}/*
>>>     Типом T является java.lang.Integer
        значение: 88

        Типом T является java.lang.String
        Значение: Обобщенный текст
*/
