package Generic_Обобщения;
/**
 * Язык Java предлагает ограниченные типы. Когда указывается параметр
 * типа, можно создать ограничение сверху, которое объявляет суперкласс,
 * от которого должны быть унаследованы все аргументы типов. Для этого
 * используется ключевое слово extends при указании параметра типа. Это
 * означает, что параметр Т может быть заменен только классом суперкласс
 * либо его подклассами. Т.е. суперкласс объявляет включающую верхнюю
 * границу.
 * Поскольку тип Т теперь ограничен классом Number, компилятор Java
 * знает, что все объекты типа Т могут вызывать метод doubleValue(), так
 * как это метод класса Number.
 * В дополнение к использованию типа класса как ограничения, можно также
 * применять тип интерфейса. Фактически можно указывать в качестве
 * ограничений множество интерфейсов. Более того, такое ограничение может
 * включать как тип класса, так и один или более интерфейсов. В этом случае
 * тип класса должен быть задан первым. Когда ограничение включает тип
 * интерфейса, допустимы только аргументы типа, реализующие этот интерфейс.
 * Указывая ограничение, имеющее класс и интерфейс либо множество интерфейсов,
 * применяют оператор "&" для их объединения.
 *      class Gen<T extends MyClass & Mylnterface> { // ...
 * Здесь параметр T ограничен классом по имени MyClass и  интерфейсом
 * Mylnteface. То есть любой тип, переданный параметру Т, должен быть
 * подклассом класса MyClass и иметь реализацию интерфейса Mylnteface.
 */
class Stats<T extends Number> {
    // В этой версии Stats аргумент типа Т должен быть либо Number,
    // либо классом, унаследованным от него.
    T[] nums;// массив Number или подклассов

    // Передать конструктору ссылку на массив элементов Number или
    // его подклассов.
    Stats(T[] о) {
        nums = о;
    }
    // Возвратить double во всех случаях,
    double average() {
        double sum = 0.0;
        for(int i=0; i < nums.length; i++)
            sum += nums[i].doubleValue();
        return sum/nums.length;
    }
}
